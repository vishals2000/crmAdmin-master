{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/aot-clean-transformer/utils.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAEjC,gCAAuC,IAA0B,EAAE,WAA0B;IAC3F,IAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;IAChC,IAAI,UAAU,GAAkB,IAAI,CAAC;IACrC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAChB,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa;YAC9B,UAAU,GAAI,EAAuB,CAAC,IAAI,CAAC;YAC3C,KAAK,CAAC;QACR;YACE,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3B,yDAAyD;YACzD,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;YAC3C,IAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;YAC3C,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC7C,sEAAsE;gBACtE,MAAM,CAAC,CAAE,EAAyB,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;YACtD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,mDAAmD;gBACnD,IAAM,YAAY,GAAG,EAAqB,CAAC;gBAE3C,MAAM,CAAC,YAAY,CAAC,QAAQ;qBACzB,GAAG,CAAC,UAAC,EAAsB,IAAK,OAAA,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAArD,CAAqD,CAAC,CAAC;YAC5F,CAAC;QACH,CAAC;IACH,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,uDAAuD;QACvD,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AApCD,wDAoCC;AAED,wBAA+B,SAAkC;IAC/D,IAAI,QAAQ,GAAG,WAAW,CAAC;IAE3B,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACnB,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5B,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa;gBAC9B,IAAM,IAAI,GAAG,SAAS,CAAC,IAA4B,CAAC;gBACpD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClB,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACpD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC3C,CAAC;gBACD,KAAK,CAAC;YACR,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU;gBAC3B,QAAQ,GAAG,WAAW,CAAC;gBACvB,KAAK,CAAC;YACR;gBACE,QAAQ,GAAG,MAAM,CAAC;QACtB,CAAC;IACH,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC;AAtBD,wCAsBC","sourcesContent":["import * as ts from 'typescript';\n\nexport function angularImportsFromNode(node: ts.ImportDeclaration, _sourceFile: ts.SourceFile): string[] {\n  const ms = node.moduleSpecifier;\n  let modulePath: string | null = null;\n  switch (ms.kind) {\n    case ts.SyntaxKind.StringLiteral:\n      modulePath = (ms as ts.StringLiteral).text;\n      break;\n    default:\n      return [];\n  }\n\n  if (!modulePath.startsWith('@angular/')) {\n    return [];\n  }\n\n  if (node.importClause) {\n    if (node.importClause.name) {\n      // This is of the form `import Name from 'path'`. Ignore.\n      return [];\n    } else if (node.importClause.namedBindings) {\n      const nb = node.importClause.namedBindings;\n      if (nb.kind == ts.SyntaxKind.NamespaceImport) {\n        // This is of the form `import * as name from 'path'`. Return `name.`.\n        return [(nb as ts.NamespaceImport).name.text + '.'];\n      } else {\n        // This is of the form `import {a,b,c} from 'path'`\n        const namedImports = nb as ts.NamedImports;\n\n        return namedImports.elements\n          .map((is: ts.ImportSpecifier) => is.propertyName ? is.propertyName.text : is.name.text);\n      }\n    }\n  } else {\n    // This is of the form `import 'path';`. Nothing to do.\n    return [];\n  }\n}\n\nexport function ctorParameName(paramNode: ts.ParameterDeclaration): string {\n  let typeName = 'undefined';\n\n  if (paramNode.type) {\n    switch (paramNode.type.kind) {\n      case ts.SyntaxKind.TypeReference:\n        const type = paramNode.type as ts.TypeReferenceNode;\n        if (type.typeName) {\n          typeName = type.typeName.getText(this.sourceFile);\n        } else {\n          typeName = type.getText(this.sourceFile);\n        }\n        break;\n      case ts.SyntaxKind.AnyKeyword:\n        typeName = 'undefined';\n        break;\n      default:\n        typeName = 'null';\n    }\n  }\n\n  return typeName;\n}"]}