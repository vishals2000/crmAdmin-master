"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
function angularImportsFromNode(node, _sourceFile) {
    var ms = node.moduleSpecifier;
    var modulePath = null;
    switch (ms.kind) {
        case ts.SyntaxKind.StringLiteral:
            modulePath = ms.text;
            break;
        default:
            return [];
    }
    if (!modulePath.startsWith('@angular/')) {
        return [];
    }
    if (node.importClause) {
        if (node.importClause.name) {
            // This is of the form `import Name from 'path'`. Ignore.
            return [];
        }
        else if (node.importClause.namedBindings) {
            var nb = node.importClause.namedBindings;
            if (nb.kind == ts.SyntaxKind.NamespaceImport) {
                // This is of the form `import * as name from 'path'`. Return `name.`.
                return [nb.name.text + '.'];
            }
            else {
                // This is of the form `import {a,b,c} from 'path'`
                var namedImports = nb;
                return namedImports.elements
                    .map(function (is) { return is.propertyName ? is.propertyName.text : is.name.text; });
            }
        }
    }
    else {
        // This is of the form `import 'path';`. Nothing to do.
        return [];
    }
}
exports.angularImportsFromNode = angularImportsFromNode;
function ctorParameName(paramNode) {
    var typeName = 'undefined';
    if (paramNode.type) {
        switch (paramNode.type.kind) {
            case ts.SyntaxKind.TypeReference:
                var type = paramNode.type;
                if (type.typeName) {
                    typeName = type.typeName.getText(this.sourceFile);
                }
                else {
                    typeName = type.getText(this.sourceFile);
                }
                break;
            case ts.SyntaxKind.AnyKeyword:
                typeName = 'undefined';
                break;
            default:
                typeName = 'null';
        }
    }
    return typeName;
}
exports.ctorParameName = ctorParameName;
//# sourceMappingURL=utils.js.map