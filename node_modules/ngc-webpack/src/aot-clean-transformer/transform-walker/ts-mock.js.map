{"version":3,"file":"ts-mock.js","sourceRoot":"","sources":["../../../../src/aot-clean-transformer/transform-walker/ts-mock.ts"],"names":[],"mappings":"","sourcesContent":["export const enum InternalSymbolName {\n  Call = \"__call\", // Call signatures\n  Constructor = \"__constructor\", // Constructor implementations\n  New = \"__new\", // Constructor signatures\n  Index = \"__index\", // Index signatures\n  ExportStar = \"__export\", // Module export * declarations\n  Global = \"__global\", // Global self-reference\n  Missing = \"__missing\", // Indicates missing symbol\n  Type = \"__type\", // Anonymous type literal symbol\n  Object = \"__object\", // Anonymous object literal declaration\n  JSXAttributes = \"__jsxAttributes\", // Anonymous JSX attributes object literal declaration\n  Class = \"__class\", // Unnamed class expression\n  Function = \"__function\", // Unnamed function expression\n  Computed = \"__computed\", // Computed property name declaration with dynamic name\n  Resolving = \"__resolving__\", // Indicator symbol used to mark partially resolved type aliases\n  ExportEquals = \"export=\", // Export assignment symbol\n  Default = \"default\", // Default export symbol (technically not wholly internal, but included here for usability)\n}\n\n/**\n * This represents a string whose leading underscore have been escaped by adding extra leading underscores.\n * The shape of this brand is rather unique compared to others we've used.\n * Instead of just an intersection of a string and an object, it is that union-ed\n * with an intersection of void and an object. This makes it wholly incompatible\n * with a normal string (which is good, it cannot be misused on assignment or on usage),\n * while still being comparable with a normal string via === (also good) and castable from a string.\n */\nexport type __String = (string & { __escapedIdentifier: void }) | (void & { __escapedIdentifier: void }) | InternalSymbolName;\n\n/** ReadonlyMap where keys are `__String`s. */\nexport interface ReadonlyUnderscoreEscapedMap<T> {\n  get(key: __String): T | undefined;\n  has(key: __String): boolean;\n  forEach(action: (value: T, key: __String) => void): void;\n  readonly size: number;\n  keys(): Iterator<__String>;\n  values(): Iterator<T>;\n  entries(): Iterator<[__String, T]>;\n}\n\n/** Map where keys are `__String`s. */\nexport interface UnderscoreEscapedMap<T> extends ReadonlyUnderscoreEscapedMap<T> {\n  set(key: __String, value: T): this;\n  delete(key: __String): boolean;\n  clear(): void;\n}\n\n/** SymbolTable based on ES6 Map interface. */\nexport type SymbolTable = UnderscoreEscapedMap<Symbol>;\n"]}